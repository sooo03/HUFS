#Node 클래스와 DoublyLinkedList 클래스를 정의하고, 여러가지 함수 구현해보기

class Node:
	def __init__(self, key=None):
		self.key = key
		self.prev = self
		self.next = self
	def __str__(self):
		return str(self.key)

class DoublyLinkedList:
	def __init__(self):
		self.head = Node() # create an empty list with only dummy node

	def __iter__(self):
		v = self.head.next
		while v != self.head:
			yield v
			v = v.next
	def __str__(self):
		return " -> ".join(str(v.key) for v in self)

	def printList(self):
		v = self.head.next
		print("h -> ", end="")
		while v != self.head:
			print(str(v.key)+" -> ", end="")
			v = v.next
		print("h")

	def splice(self, a, b, x):
		if a==None or b==None or x==None:
			return
		a.prev.next=b.next
		b.next.prev=a.prev
		
		b.next=x.next
		x.next.prev=b
		x.next=a
		a.prev=x
		
	def moveAfter(self, a, x):
		if a==None or x==None:
			return
		self.splice(a, a, x)
		
	def moveBefore(self, a, x):
		if a==None or x==None:
			return
		self.splice(a, a, x.prev)
		
	def insertAfter(self, x, key):
		if a==None:
			return
		node = Node(key)
		self.splice(node, node, a)
		
	def insertBefore(self, x, key):
		if a==None:
			return
		self.splice(node, node, a.prev)
		
	def pushFront(self, key):
		self.insertAfter(self.head, key)
		
	def pushBack(self, key):
		self.insertBefore(self.head, key)
		
	def pushBack(self, key):
		self.insertBefore(self.head, key)
		
	def deleteNode(self, x):
		if x == None or self.isEmpty():
			return
		x.prev.next = x.next
		x.next.prev = x.prev
			
	def popFront(self):
		if self.isEmpty():
			return None
		else:
			key = self.head.next.key
			self.deleteNode(self.head.next)
			return key
		
	def popBack(self):
		if self.isEmpty():
			return None
		key = self.head.prev.key
		self.deleteNode(self.head.prev)
		return key
	
	def search(self, key):
		if self.isEmpty():
			return
		n = self.head.next
		while n !=self.head:
			if n.key == key:
				return n
			n = n.next
		return 
		
	def first(self):
		x = self.head
		return x.next
	
	def last(self):
		x = self.head
		return x.prev
	
	def isEmpty(self):
		return self.head.next == self.head
	
	def findMax(self):
		if not self.head:
			return None
		max_node = self.head.next
		node = self.head.next
		while node != self.head:
			if node.key > max_node.key:
				max_node = node
			node = node.next
		return max_node
		
	def deleteMax(self):
		if self.isEmpty():
			return
		max_v = self.findMax()
		self.deleteNode(self.search(max_v))
		return max_node		
	
	def sort(self):
		sorted_list = DoublyLinkedList()
		while self.head.next != self.head:
			max_key = self.deleteMax()
			sorted_list.pushFront(max_key)
		return sorted_list
